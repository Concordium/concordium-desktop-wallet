name: Concordium Desktop Wallet debug build
on:
  # Allows us to run the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      network:
        description: 'Target network (mainnet, testnet, stagenet)'
        required: true
        default: 'mainnet'
        type: choice
        options:
          - mainnet
          - testnet
          - stagenet
      platforms:
        description: 'Platforms to build for'
        required: true
        type: choice
        options:
          - all
          - windows
          - linux
          - macos-intel

env:
  WASM-PACK_VERSION: "v0.13.1"
  NODE_VERSION: "18.20.7"
  RUST_VERSION: "1.74.1"
  PYTHON_VERSION: "3.13.1"

jobs:
  build:
    name: Build on ${{ matrix.platform.runner }}
    environment: code-sign-build
    strategy:
      matrix:
        platform:
          - id: linux
            runner: ubuntu-latest
            shell: bash
          - id: windows
            runner: windows-2019
            shell: powershell
          - id: macos-intel
            runner: macos-13
            shell: bash
    if: |
      github.event.inputs.platforms == 'all' ||
      github.event.inputs.platforms == matrix.platform.id
    runs-on: ${{ matrix.platform.runner }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }} {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ github.ref_name }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          rustflags: ""

      - name: Setup wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: ${{ env.WASM-PACK_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: List dependency versions
        run: |
          echo "::notice::node version: $(node --version)"
          echo "::notice::npm version: $(npm --version)"
          echo "::notice::yarn version: $(yarn --version)"
          echo "::notice::python version: $(python --version)"
          echo "::notice::rustup version: $(rustup show)"
          echo "::notice::wasm-pack version: $(wasm-pack --version)"
          echo "::notice::target network: ${{ github.event.inputs.network }}"

      - name: Install native packages (Ubuntu only)
        if: matrix.platform.id == 'linux'
        run: sudo apt-get install -y libusb-1.0 libudev-dev rpm

      - name: Install Node packages
        env:
          COREPACK_ENABLE_DOWNLOAD_PROMPT: "0"
        run: |
          corepack enable
          yarn

      - name: Install DigiCert Client tools (Windows only)
        if: matrix.platform.id == 'windows'
        id: digicert_client
        uses: digicert/ssm-code-signing@v1.0.0

      - name: Import Windows certificate (Windows only)
        id: windows_certificate
        if: matrix.platform.id == 'windows'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_BUILD_CERTIFICATE_BASE64 }}
        run: |
          $CERTIFICATE_PATH_BASE64="$env:RUNNER_TEMP\windows_build_certificate.txt"
          $CERTIFICATE_PATH="$env:RUNNER_TEMP\windows_build_certificate.pfx"

          Set-Content -Path $CERTIFICATE_PATH_BASE64 -Value $env:BUILD_CERTIFICATE_BASE64
          certutil -decode $CERTIFICATE_PATH_BASE64 $CERTIFICATE_PATH
          echo "CERTIFICATE_PATH=$CERTIFICATE_PATH" >> $env:GITHUB_OUTPUT

      - name: Import Apple certificate and provisioning profile (MacOS only)
        if: matrix.platform.id == 'macos-intel'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          BUILD_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_BUILD_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/apple_build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$BUILD_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build
        env:
          DEBUG_PROD: true
          TARGET_NET: ${{ github.event.inputs.network }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLEID: ${{ secrets.APPLEID }}
          TEAMID: ${{ secrets.TEAMID }}
          WINDOWS_PKCS11_CONFIG: ${{ steps.digicert_client.outputs.PKCS11_CONFIG }}
          WINDOWS_SM_KEYPAIR_ALIAS: ${{ secrets.WINDOWS_SM_KEYPAIR_ALIAS }}
          SM_HOST: ${{ secrets.WINDOWS_SM_HOST }}
          SM_API_KEY: ${{ secrets.WINDOWS_SM_API_KEY }}
          SM_CLIENT_CERT_FILE: ${{ steps.windows_certificate.outputs.CERTIFICATE_PATH }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.WINDOWS_BUILD_CERTIFICATE_PASSWORD }}
        run: yarn package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.id }}-${{ github.event.inputs.network }}
          if-no-files-found: error
          path: |
            release/concordium-desktop-wallet-*
