name: Concordium Desktop Wallet release
on:
  push:
    tags:
      - 'desktop-wallet/*.*.*-stagenet'
      - 'desktop-wallet/*.*.*-testnet'
      - 'desktop-wallet/*.*.*-mainnet'

env:
  WASM-PACK_VERSION: "v0.13.1"
  NODE_VERSION: "18.20.7"
  RUST_VERSION: "1.74.1"
  PYTHON_VERSION: "3.13.1"

jobs:
  metadata:
    name: Check version and prepare metadata
    # runs-on: ubuntu-latest
    runs-on: ubuntu-22.04
    outputs:
      TARGET_NET: ${{ steps.target_net.outputs.TARGET_NET }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ github.ref_name }}

      - name: Extract target network from tag
        id: target_net
        env:
          TAG: ${{ github.ref_name }}
        run: |
          TARGET_NET=${TAG##desktop-wallet/*-}
          echo "TARGET_NET=$TARGET_NET" >> $GITHUB_OUTPUT

      - name: Verify tag version against project version
        id: version_check
        env:
          TAG: ${{ github.ref_name}}
        run: |
          # Extract version number
          VERSION=$(jq '.version' -r app/package.json)

          TAG_VERSION_NET=${TAG##*/}
          TAG_VERSION=${TAG_VERSION_NET%%-*}
          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "::error:: Tag version is not correct. Tag version: $TAG_VERSION version from package.json: $VERSION"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build on ${{ matrix.platform.runner }}
    needs: metadata
    environment: code-sign-build
    strategy:
      matrix:
        # For each platform provide the runner image, the shell to use and some unique id.
        platform:
          - id: linux
            # runner: ubuntu-latest
            runner: ubuntu-22.04
            shell: bash
          - id: windows
            runner: windows-2022
            # Since electron-builder does not support pwsh, we use powershell instead.
            shell: powershell
          - id: macos-intel
            runner: macos-13
            shell: bash
          # Try enable mac ARM64 build target once node dependencies are updated.
          # - id: macos-arm64
          #   runner: macos-14
    runs-on: ${{ matrix.platform.runner }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }} {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ github.ref_name }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          # Disable the default behavior of treating warnings as errors.
          # Should be removed again once the warnings are resolved.
          rustflags: ""

      - name: Setup wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: ${{ env.WASM-PACK_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: List dependency versions
        run: |
          echo "::notice::node version: $(node --version)"
          echo "::notice::npm version: $(npm --version)"
          echo "::notice::yarn version: $(yarn --version)"
          echo "::notice::python version: $(python --version)"
          echo "::notice::rustup version: $(rustup show)"
          echo "::notice::wasm-pack version: $(wasm-pack --version)"
          echo "::notice::OpenSSL version:" $(openssl version)

      - name: Install native packages and OpenSSL 1.1 (Ubuntu only)
        if: matrix.platform.id == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libusb-1.0 libudev-dev rpm wget patchelf build-essential

          # Install libssl1.1 manually on Ubuntu 22.04 and 24.04 if missing
          if ! dpkg -s libssl1.1 >/dev/null 2>&1; then
            echo "::group::Installing OpenSSL 1.1 manually"
            wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.1/libssl1.1_1.1.1f-1ubuntu2.19_amd64.deb
            sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.19_amd64.deb
            echo "::endgroup::"
          fi

          # Install OpenSSL development files (static libs)
          sudo apt-get install -y libssl-dev

          # Download linuxdeploy for AppImage creation
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage --version

      - name: Install Node packages
        env:
          # Prevent corepack from prompting for permission to download.
          COREPACK_ENABLE_DOWNLOAD_PROMPT: "0"
        run: |
          corepack enable
          yarn

      - name: Install DigiCert Client tools (Windows only)
        if: matrix.platform.id == 'windows'
        id: digicert_client
        uses: digicert/ssm-code-signing@v1.0.1

      - name: Import Windows certificate (Windows only)
        id: windows_certificate
        if: matrix.platform.id == 'windows'
        env:
          # Base64 encoding of the pfx/p12 certificate for Windows code signing.
          BUILD_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_BUILD_CERTIFICATE_BASE64 }}
        run: |
          $CERTIFICATE_PATH_BASE64="$env:RUNNER_TEMP\windows_build_certificate.txt"
          $CERTIFICATE_PATH="$env:RUNNER_TEMP\windows_build_certificate.pfx"

          Set-Content -Path $CERTIFICATE_PATH_BASE64 -Value $env:BUILD_CERTIFICATE_BASE64
          certutil -decode $CERTIFICATE_PATH_BASE64 $CERTIFICATE_PATH
          echo "CERTIFICATE_PATH=$CERTIFICATE_PATH" >> $env:GITHUB_OUTPUT

      - name: Import Apple certificate and provisioning profile (MacOS only)
        if: matrix.platform.id == 'macos-intel'
        env:
          # Base64 encoding of the p12 certificate for Apple code signing.
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          # Password for the p12 certificate for Apple code signing.
          BUILD_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_BUILD_CERTIFICATE_PASSWORD }}
          # Random string to use as the keychain password.
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/apple_build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$BUILD_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build
        env:
          # Set the target Concordium network for the build.
          TARGET_NET: ${{ needs.metadata.outputs.TARGET_NET }}
          # Apple code sign variables:
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLEID: ${{ secrets.APPLEID }}
          TEAMID: ${{ secrets.TEAMID }}
          # Windows code sign variables:
          WINDOWS_PKCS11_CONFIG: ${{ steps.digicert_client.outputs.PKCS11_CONFIG }}
          WINDOWS_SM_KEYPAIR_ALIAS: ${{ secrets.WINDOWS_SM_KEYPAIR_ALIAS }}
          SM_HOST: ${{ secrets.WINDOWS_SM_HOST }}
          SM_API_KEY: ${{ secrets.WINDOWS_SM_API_KEY }}
          SM_CLIENT_CERT_FILE: ${{ steps.windows_certificate.outputs.CERTIFICATE_PATH }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.WINDOWS_BUILD_CERTIFICATE_PASSWORD }}

          # New environment variables for static OpenSSL
          OPENSSL_STATIC: "1"
          OPENSSL_DIR: "/usr/lib/ssl" 
          PKG_CONFIG_ALLOW_CROSS: "1"
        run: yarn package

      # --- New step to create AppImage for Linux only ---
      - name: Create AppImage with linuxdeploy
        if: matrix.platform.id == 'linux'
        run: |
          ./linuxdeploy-x86_64.AppImage --appdir=release/concordium-desktop-wallet.AppDir \
            --output appimage \
            --executable=release/concordium-desktop-wallet.AppDir/usr/bin/concordium-desktop-wallet

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.id }}
          if-no-files-found: error
          path: |
            release/concordium-desktop-wallet-*
            release/latest*.yml
            release/testnet*.yml
            release/stagenet*.yml

  release:
    name: Attach to Github release (Auto update prompts will appear for supported platforms).
    needs: [metadata, build]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install native packages
        run: sudo apt-get install -y libusb-1.0 libudev-dev rpm

      - name: Install Node packages
        env:
          # Prevent corepack from prompting for permission to download.
          COREPACK_ENABLE_DOWNLOAD_PROMPT: "0"
        run: |
          corepack enable
          yarn

      - uses: actions/download-artifact@v4
      - run: |
          mkdir uploads
          mv linux/* uploads/
          mv windows/* uploads/
          mv macos-intel/* uploads/

      - name: Retrieve sign key and generate verification assets
        env:
          FILE_DIGEST_SIGN_KEY_BASE64: ${{ secrets.FILE_DIGEST_SIGN_KEY_BASE64 }}
          TARGET_NET: ${{ needs.metadata.outputs.TARGET_NET }}
        run: |
          SIGN_KEY_PATH=$RUNNER_TEMP/private-sign-key.pem
          echo $FILE_DIGEST_SIGN_KEY_BASE64 | base64 --decode > $SIGN_KEY_PATH
          yarn generate-verification-assets --pkey $SIGN_KEY_PATH --dir ./uploads

      - name: Attach binaries to an existing release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} uploads/*
